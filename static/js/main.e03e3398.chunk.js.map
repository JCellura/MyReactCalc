{"version":3,"sources":["component/Display/Display.js","component/Button/Button.js","component/ButtonPanel/ButtonPanel.js","App.js","serviceWorker.js","index.js"],"names":["Display","react_default","a","createElement","className","this","props","value","React","Component","Button","state","firstNumber","secondNumber","isOperatorChosen","operator","handleButtonClick","_this","clickHandler","name","orange","wide","join","trim","onClick","ButtonPanel","handleClick","buttonName","buttonClass","component_Button_Button","App","result","isCalculated","setState","Number","parseFloat","toString","console","log","alert","component_Display_Display","total","component_ButtonPanel_ButtonPanel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"yTAgBeA,0LAVX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,WAAME,KAAKC,MAAMC,eAJHC,IAAMC,YCyDbC,0NAvDXC,MAAQ,CACJC,YAAa,GACbC,aAAc,GACdC,kBAAkB,EAClBC,SAAU,MAGdC,kBAAoB,WAChBC,EAAKX,MAAMY,aAAaD,EAAKX,MAAMa,KAAMF,EAAKX,MAAMF,oFAuBpD,IAAMA,EAAY,CACd,mBACAC,KAAKC,MAAMc,OAAS,SAAW,GAC/Bf,KAAKC,MAAMe,KAAO,OAAS,IAG/B,OACIpB,EAAAC,EAAAC,cAAA,OAAKC,UAAWA,EAAUkB,KAAK,KAAKC,QAChCtB,EAAAC,EAAAC,cAAA,UACIC,UAAWC,KAAKC,MAAMF,UACtBe,KAAMd,KAAKC,MAAMa,KACjBK,QAASnB,KAAKW,mBAAoBX,KAAKC,MAAMa,cA5C5CV,cCgDNgB,6MA7CXC,YAAc,SAACC,EAAYC,GACvBX,EAAKX,MAAMY,aAAaS,EAAYC,4EAIpC,OACI3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC0B,EAAD,CAAQV,KAAK,KAAKD,aAAcb,KAAKqB,cACrCzB,EAAAC,EAAAC,cAAC0B,EAAD,CAAQV,KAAK,MAAMf,UAAU,SAASc,aAAcb,KAAKqB,cACzDzB,EAAAC,EAAAC,cAAC0B,EAAD,CAAQV,KAAK,IAAIf,UAAU,SAASc,aAAcb,KAAKqB,cACvDzB,EAAAC,EAAAC,cAAC0B,EAAD,CAAQV,KAAK,OAAIf,UAAU,WAAWc,aAAcb,KAAKqB,YAAaN,QAAM,KAGhFnB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC0B,EAAD,CAAQV,KAAK,IAAIf,UAAU,SAASc,aAAcb,KAAKqB,cACvDzB,EAAAC,EAAAC,cAAC0B,EAAD,CAAQV,KAAK,IAAIf,UAAU,SAASc,aAAcb,KAAKqB,cACvDzB,EAAAC,EAAAC,cAAC0B,EAAD,CAAQV,KAAK,IAAIf,UAAU,SAASc,aAAcb,KAAKqB,cACvDzB,EAAAC,EAAAC,cAAC0B,EAAD,CAAQV,KAAK,IAAIf,UAAU,WAAWc,aAAcb,KAAKqB,YAAaN,QAAM,KAGhFnB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC0B,EAAD,CAAQV,KAAK,IAAIf,UAAU,SAASc,aAAcb,KAAKqB,cACvDzB,EAAAC,EAAAC,cAAC0B,EAAD,CAAQV,KAAK,IAAIf,UAAU,SAASc,aAAcb,KAAKqB,cACvDzB,EAAAC,EAAAC,cAAC0B,EAAD,CAAQV,KAAK,IAAIf,UAAU,SAASc,aAAcb,KAAKqB,cACvDzB,EAAAC,EAAAC,cAAC0B,EAAD,CAAQV,KAAK,IAAIf,UAAU,WAAWc,aAAcb,KAAKqB,YAAaN,QAAM,KAGhFnB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC0B,EAAD,CAAQV,KAAK,IAAIf,UAAU,SAASc,aAAcb,KAAKqB,cACvDzB,EAAAC,EAAAC,cAAC0B,EAAD,CAAQV,KAAK,IAAIf,UAAU,SAASc,aAAcb,KAAKqB,cACvDzB,EAAAC,EAAAC,cAAC0B,EAAD,CAAQV,KAAK,IAAIf,UAAU,SAASc,aAAcb,KAAKqB,cACvDzB,EAAAC,EAAAC,cAAC0B,EAAD,CAAQV,KAAK,IAAIf,UAAU,WAAWc,aAAcb,KAAKqB,YAAaN,QAAM,KAGhFnB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC0B,EAAD,CAAQV,KAAK,IAAIf,UAAU,SAASc,aAAcb,KAAKqB,YAAaL,MAAI,IACxEpB,EAAAC,EAAAC,cAAC0B,EAAD,CAAQV,KAAK,IAAIf,UAAU,SAASc,aAAcb,KAAKqB,cACvDzB,EAAAC,EAAAC,cAAC0B,EAAD,CAAQV,KAAK,IAAID,aAAcb,KAAKqB,YAAaN,QAAM,aAxCjDX,aC4HXqB,oNAlHXnB,MAAQ,CACNC,YAAa,GACbC,aAAc,GACdC,kBAAkB,EAClBC,SAAU,GACVgB,OAAQ,GACRC,cAAc,KAGlBN,YAAc,SAACC,EAAYC,GAIL,WAAhBA,IAAwD,IAA5BX,EAAKN,MAAMqB,cAEL,IAAhCf,EAAKN,MAAMG,kBACbG,EAAKgB,SAAS,CAACrB,YAAaK,EAAKN,MAAMC,YAAce,EAAYI,OAAQd,EAAKN,MAAMoB,OAASJ,IAG1E,MAAfA,EACFV,EAAKgB,SAAS,CAACrB,aAAcsB,OAAOC,WAAWlB,EAAKN,MAAMC,aAAe,KAAKwB,WAC9DL,QAASG,OAAOC,WAAWlB,EAAKN,MAAMC,aAAe,KAAKwB,aAEpD,QAAfT,GACPV,EAAKgB,SAAS,CAACrB,cAAgBsB,OAAOC,WAAWlB,EAAKN,MAAMC,cAAewB,WAC3DL,SAAWG,OAAOC,WAAWlB,EAAKN,MAAMC,cAAewB,eAOlC,IAAhCnB,EAAKN,MAAMG,mBAAyD,IAA5BG,EAAKN,MAAMqB,eAE1Df,EAAKgB,SAAS,CAACF,OAAO,KACtBd,EAAKgB,SAAS,CAACpB,aAAcI,EAAKN,MAAME,aAAec,EAAYI,OAAQd,EAAKN,MAAME,aAAec,IAGlF,MAAfA,EACFV,EAAKgB,SAAS,CAACpB,cAAeqB,OAAOC,WAAWlB,EAAKN,MAAME,cAAgB,KAAKuB,WAChEL,QAASG,OAAOC,WAAWlB,EAAKN,MAAME,cAAgB,KAAKuB,aAErD,QAAfT,GACPV,EAAKgB,SAAS,CAACpB,eAAiBqB,OAAOC,WAAWlB,EAAKN,MAAME,eAAgBuB,WAC7DL,SAAWG,OAAOC,WAAWlB,EAAKN,MAAME,eAAgBuB,cAIrD,aAAhBR,IAA8D,IAAhCX,EAAKN,MAAMG,iBAChDG,EAAKgB,SAAS,CAACnB,kBAAkB,EAAMC,SAAUY,IAE1B,YAAhBC,EACPX,EAAKgB,SAAS,CAACF,QAASG,OAAOC,WAAWlB,EAAKN,MAAMoB,QAAU,KAAKK,aAG9C,MAAfT,IAAkD,IAA5BV,EAAKN,MAAMqB,cACxCK,QAAQC,IAAI,SAEgB,MAAxBrB,EAAKN,MAAMI,UACbE,EAAKgB,SAAS,CAACF,QACIG,OAAOC,WAAWlB,EAAKN,MAAMC,YAAa,IACzCsB,OAAOC,WAAWlB,EAAKN,MAAME,aAAc,KAAKuB,aACpEnB,EAAKgB,SAAS,CAACD,cAAc,KAEE,MAAxBf,EAAKN,MAAMI,UAClBE,EAAKgB,SAAS,CAACF,QACIG,OAAOC,WAAWlB,EAAKN,MAAMC,YAAY,IACxCsB,OAAOC,WAAWlB,EAAKN,MAAME,aAAc,KAAKuB,aACpEnB,EAAKgB,SAAS,CAACD,cAAc,KAEE,MAAxBf,EAAKN,MAAMI,UAClBE,EAAKgB,SAAS,CAACF,QACIG,OAAOC,WAAWlB,EAAKN,MAAMC,YAAY,IACxCsB,OAAOC,WAAWlB,EAAKN,MAAME,aAAc,KAAKuB,aACpEnB,EAAKgB,SAAS,CAACD,cAAc,KAEE,SAAxBf,EAAKN,MAAMI,UAClBE,EAAKgB,SAAS,CAACF,QACIG,OAAOC,WAAWlB,EAAKN,MAAMC,YAAY,IACxCsB,OAAOC,WAAWlB,EAAKN,MAAME,aAAc,KAAKuB,aACpEnB,EAAKgB,SAAS,CAACD,cAAc,KAEE,MAAxBf,EAAKN,MAAMI,UAClBE,EAAKgB,SAAS,CAACF,OAAQG,OAAOC,WAAWlB,EAAKN,MAAMoB,QAAU,IAGhEd,EAAKgB,SAAS,CAACD,cAAc,KAGP,OAAfL,EACPV,EAAKgB,SAAS,CACZrB,YAAa,GACbC,aAAc,GACdC,kBAAkB,EAClBC,SAAU,GACVgB,OAAQ,GACRC,cAAc,IAGbO,MAAM,uHAKX,OADAF,QAAQC,IAAIjC,KAAKM,OAEfV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACqC,EAAD,CAASjC,MAAOF,KAAKM,MAAMoB,QAAU1B,KAAKM,MAAM8B,OAAS,MACzDxC,EAAAC,EAAAC,cAACuC,EAAD,CAAaxB,aAAcb,KAAKqB,sBApHtBjB,cCMEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.e03e3398.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Display.css\";\n\nclass Display extends React.Component {\n  render() {\n    return (\n      <div className=\"component-display\">\n        <div>{this.props.value}</div>\n      </div>\n    );\n  }\n}\nDisplay.propTypes = {\n  value: PropTypes.string,\n};\nexport default Display;","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Button.css\";\n\nclass Button extends Component {\n\n    state = {\n        firstNumber: \"\",\n        secondNumber: \"\",\n        isOperatorChosen: false,\n        operator: \"\"\n    }\n\n    handleButtonClick = () => {\n        this.props.clickHandler(this.props.name, this.props.className);\n        // // console.log(this.props.name);\n\n        // if (this.props.className === \"number\") {\n        //     if (this.state.isOperatorChosen === false) {\n        //         this.setState({firstNumber: this.state.firstNumber + this.props.name});\n        //         console.log(\"hello\",this.state);\n        //     }\n        //     else if (this.state.isOperatorChosen === true) {\n        //         this.setState({secondNumber: this.state.secondNumber + this.props.name});\n        //         console.log(\"2\",this.state);\n        //     }\n        // }\n        // else if (this.props.className === \"operator\") {\n        //     console.log(this.props.name);\n        //     this.setState({isOperatorChosen: true});\n        //     console.log(this.state);\n        // }\n        \n    }\n\n    render() {\n\n        const className = [\n            \"component-button\",\n            this.props.orange ? \"orange\" : \"\",\n            this.props.wide ? \"wide\" : \"\"\n        ];\n\n        return (\n            <div className={className.join(\" \").trim()}>\n                <button \n                    className={this.props.className} \n                    name={this.props.name} \n                    onClick={this.handleButtonClick}>{this.props.name}</button>\n            </div>\n        )\n    }\n}\n\nButton.propTypes = {\n    name: PropTypes.string,\n    orange: PropTypes.bool,\n    wide: PropTypes.bool,\n    clickHandler: PropTypes.func\n}\n\nexport default Button;","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./ButtonPanel.css\";\nimport Button from \"../Button\";\n\nclass ButtonPanel extends Component {\n\n    handleClick = (buttonName, buttonClass) => {\n        this.props.clickHandler(buttonName, buttonClass);\n    };\n\n    render() {\n        return (\n            <div className=\"component-button-panel\">\n                <div>\n                    <Button name=\"AC\" clickHandler={this.handleClick}/>\n                    <Button name=\"+/-\" className=\"number\" clickHandler={this.handleClick}/>\n                    <Button name=\"%\" className=\"number\" clickHandler={this.handleClick}/>\n                    <Button name=\"รท\" className=\"operator\" clickHandler={this.handleClick} orange/>\n                </div>\n\n                <div>\n                    <Button name=\"7\" className=\"number\" clickHandler={this.handleClick}/>\n                    <Button name=\"8\" className=\"number\" clickHandler={this.handleClick}/>\n                    <Button name=\"9\" className=\"number\" clickHandler={this.handleClick}/>\n                    <Button name=\"x\" className=\"operator\" clickHandler={this.handleClick} orange/>\n                </div>\n\n                <div>\n                    <Button name=\"4\" className=\"number\" clickHandler={this.handleClick}/>\n                    <Button name=\"5\" className=\"number\" clickHandler={this.handleClick}/>\n                    <Button name=\"6\" className=\"number\" clickHandler={this.handleClick}/>\n                    <Button name=\"-\" className=\"operator\" clickHandler={this.handleClick} orange/>\n                </div>\n\n                <div>\n                    <Button name=\"1\" className=\"number\" clickHandler={this.handleClick}/>\n                    <Button name=\"2\" className=\"number\" clickHandler={this.handleClick}/>\n                    <Button name=\"3\" className=\"number\" clickHandler={this.handleClick}/>\n                    <Button name=\"+\" className=\"operator\" clickHandler={this.handleClick} orange/>\n                </div>\n\n                <div>\n                    <Button name=\"0\" className=\"number\" clickHandler={this.handleClick} wide/>\n                    <Button name=\".\" className=\"number\" clickHandler={this.handleClick}/>\n                    <Button name=\"=\" clickHandler={this.handleClick} orange/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ButtonPanel","import React, {Component} from \"react\";\nimport Display from \"./component/Display\";\nimport ButtonPanel from \"./component/ButtonPanel/\";\n// import calculate from \"../logic/calculate\";\nimport \"./App.css\";\n\nclass App extends Component {\n\n    // state = {\n    //   total: null,\n    //   next: null,\n    //   operation: null,\n    // };\n\n    \n    state = {\n      firstNumber: \"\",\n      secondNumber: \"\",\n      isOperatorChosen: false,\n      operator: \"\",\n      result: \"\",\n      isCalculated: false\n    }\n\n  handleClick = (buttonName, buttonClass) => {\n    // this.setState(calculate(this.state, buttonName));\n    // console.log(buttonName, buttonClass);\n  \n    if (buttonClass === \"number\" && this.state.isCalculated === false) {\n      // console.log(\"yes\");\n      if (this.state.isOperatorChosen === false) {\n        this.setState({firstNumber: this.state.firstNumber + buttonName, result: this.state.result + buttonName});\n        // if (buttonName === \"+/-\")\n        // this.setState({firstNumber: Number.parseInt(this.state.firstNumber, 10)});\n        if (buttonName === \"%\") {\n          this.setState({firstNumber: (Number.parseFloat(this.state.firstNumber) / 100).toString(),\n                          result: (Number.parseFloat(this.state.firstNumber) / 100).toString()});\n        }\n        else if (buttonName === \"+/-\") {\n          this.setState({firstNumber: (-(Number.parseFloat(this.state.firstNumber))).toString(),\n                          result: (-(Number.parseFloat(this.state.firstNumber))).toString()});\n          //  console.log(this.state.firstNumber, \n          //               Number.parseFloat(this.state.firstNumber), \n          //                   -(Number.parseFloat(this.state.firstNumber)),\n          //                     (-(Number.parseFloat(this.state.firstNumber))).toString())\n        }\n      }\n      else if (this.state.isOperatorChosen === true && this.state.isCalculated === false) {\n        // this.setState({firstNumber: Number.parseInt(this.state.firstNumber, 10)});\n        this.setState({result:\"\"});\n        this.setState({secondNumber: this.state.secondNumber + buttonName, result: this.state.secondNumber + buttonName});\n        // this.setState({secondNumber: Number.parseInt(this.state.secondNumber, 10)})\n        // console.log(\"2\",this.state);\n        if (buttonName === \"%\") {\n          this.setState({secondNumber: (Number.parseFloat(this.state.secondNumber) / 100).toString(),\n                          result: (Number.parseFloat(this.state.secondNumber) / 100).toString()});\n        }\n        else if (buttonName === \"+/-\") {\n          this.setState({secondNumber: (-(Number.parseFloat(this.state.secondNumber))).toString(),\n                          result: (-(Number.parseFloat(this.state.secondNumber))).toString()});\n        }\n      }\n    }\n    else if (buttonClass === \"operator\" && this.state.isOperatorChosen === false) {\n      this.setState({isOperatorChosen: true, operator: buttonName});\n    }\n    else if (buttonClass === \"percent\") {\n      this.setState({result: (Number.parseFloat(this.state.result) / 100).toString()})\n    }\n\n    else if (buttonName === \"=\" && this.state.isCalculated === false) {\n      console.log(\"equal\")\n      // this.setState({secondNumber: Number.parseInt(this.state.secondNumber)});\n      if (this.state.operator === \"+\") {\n        this.setState({result: \n                          (Number.parseFloat(this.state.firstNumber, 10) + \n                            Number.parseFloat(this.state.secondNumber, 10)).toString()});\n        this.setState({isCalculated: true});\n      }\n      else if (this.state.operator === \"-\") {\n        this.setState({result: \n                          (Number.parseFloat(this.state.firstNumber,10) - \n                            Number.parseFloat(this.state.secondNumber, 10)).toString()});\n        this.setState({isCalculated: true});\n      }\n      else if (this.state.operator === \"x\") {\n        this.setState({result: \n                          (Number.parseFloat(this.state.firstNumber,10) * \n                            Number.parseFloat(this.state.secondNumber, 10)).toString()});\n        this.setState({isCalculated: true});\n      }\n      else if (this.state.operator === \"รท\") {\n        this.setState({result: \n                          (Number.parseFloat(this.state.firstNumber,10) /\n                            Number.parseFloat(this.state.secondNumber, 10)).toString()});\n        this.setState({isCalculated: true});\n      }\n      else if (this.state.operator === \"%\") {\n        this.setState({result: Number.parseFloat(this.state.result) + 1})\n      }\n\n      this.setState({isCalculated: true});\n    }\n\n    else if (buttonName === \"AC\") {\n      this.setState({\n        firstNumber: \"\",\n        secondNumber: \"\",\n        isOperatorChosen: false,\n        operator: \"\",\n        result: \"\",\n        isCalculated: false\n      })\n    }\n    else alert(\"Please Click 'AC' to Start New Calculation\")\n  };\n  \n  render() {\n    console.log(this.state);\n    return (\n      <div className=\"component-app\">\n        <Display value={this.state.result || this.state.total || \"0\"} />\n        <ButtonPanel clickHandler={this.handleClick} />\n      </div>\n    );\n  };\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}